openapi: 3.0.3
info:
  title: World Chat
  description: API documentation for World Chat application.
  version: 1.0.0
servers:
  - url: http://localhost:4200
tags:
  - name: conversation
    description: Operations about conversations
  - name: user
    description: Operations about users
  - name: message
    description: Operations about messages
  - name: contact
    description: Operations about contacts
  - name: auth
    description: Operations about authentication
paths:
  /conversations:
    post:
      tags:
        - conversation
      summary: Create a new conversation
      requestBody:
        description: Conversation object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Conversation'
      responses:
        '201':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          description: Invalid input
    get:
      tags:
        - conversation
      summary: Get all conversations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
        '500':
          description: Server error
  /conversations/{id}:
    get:
      tags:
        - conversation
      summary: Get conversation by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '404':
          description: Conversation not found
        '500':
          description: Server error
    delete:
      tags:
        - conversation
      summary: Delete conversation by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Conversation deleted successfully
        '404':
          description: Conversation not found
        '500':
          description: Server error
  /users:
    post:
      tags:
        - user
      summary: Create a new user
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
    get:
      tags:
        - user
      summary: Get all users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server error
  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Server error
    put:
      tags:
        - user
      summary: Update user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '404':
          description: User not found
        '500':
          description: Server error
    delete:
      tags:
        - user
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Server error
  /users/language/{language}:
    get:
      tags:
        - user
      summary: Find users by language
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Users not found
        '500':
          description: Server error
  /users/{id}/status:
    put:
      tags:
        - user
      summary: Update user status by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Status to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      responses:
        '200':
          description: User status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '404':
          description: User not found
        '500':
          description: Server error
  /messages:
    post:
      tags:
        - message
      summary: Create a new message
      requestBody:
        description: Message object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input
  /messages/conversation/{conversationId}:
    get:
      tags:
        - message
      summary: Get all messages by conversation ID
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '500':
          description: Server error
  /messages/{id}:
    get:
      tags:
        - message
      summary: Get message by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Message not found
        '500':
          description: Server error
    put:
      tags:
        - message
      summary: Update a message by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Message object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: Message updated successfully
        '400':
          description: Invalid input
        '404':
          description: Message not found
        '500':
          description: Server error
    delete:
      tags:
        - message
      summary: Delete a message by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Message deleted successfully
        '404':
          description: Message not found
        '500':
          description: Server error
  /contacts:
    post:
      tags:
        - contact
      summary: Create a new contact
      requestBody:
        description: Contact object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        '201':
          description: Contact created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid input
    get:
      tags:
        - contact
      summary: Get all contacts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '500':
          description: Server error
  /contacts/{userId1}/{userId2}:
    get:
      tags:
        - contact
      summary: Get contact by user IDs
      parameters:
        - name: userId1
          in: path
          required: true
          schema:
            type: string
        - name: userId2
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '404':
          description: Contact not found
        '500':
          description: Server error
    delete:
      tags:
        - contact
      summary: Delete contact by user IDs
      parameters:
        - name: userId1
          in: path
          required: true
          schema:
            type: string
        - name: userId2
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contact deleted successfully
        '404':
          description: Contact not found
        '500':
          description: Server error
  /contacts/{userId1}/{userId2}/{status}:
    put:
      tags:
        - contact
      summary: Modify contact status by user IDs
      parameters:
        - name: userId1
          in: path
          required: true
          schema:
            type: string
        - name: userId2
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Status to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      responses:
        '200':
          description: Contact status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid input
        '404':
          description: Contact not found
        '500':
          description: Server error
  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid credentials
  /start-chat:
    post:
      tags:
        - matching
      summary: Start a chat with a timeout
      requestBody:
        description: User ID and language required to start a chat
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                language:
                  type: string
      responses:
        '200':
          description: Chat started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationId:
                    type: string
                  matchedUser:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
        '400':
          description: Missing required fields
        '404':
          description: User not found or no suitable match found
        '500':
          description: Server error
  /images/upload:
    post:
      tags:
        - image
      summary: Télécharger une nouvelle image
      requestBody:
        description: Fichier image à télécharger
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Image téléchargée avec succès
        '400':
          description: Entrée invalide
  /images/message/{messageId}:
    get:
      tags:
        - image
      summary: Obtenir des images par ID de message
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Opération réussie
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        '404':
          description: Images non trouvées
        '500':
          description: Erreur serveur
  /images/{id}:
    get:
      tags:
        - image
      summary: Obtenir une image par ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Opération réussie
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '404':
          description: Image non trouvée
        '500':
          description: Erreur serveur
    delete:
      tags:
        - image
      summary: Supprimer une image par ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Image supprimée avec succès
        '404':
          description: Image non trouvée
        '500':
          description: Erreur serveur
components:
  schemas:
    Conversation:
      type: object
      properties:
        id:
          type: string
        participants:
          type: array
          items:
            type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        status:
          type: string
    Message:
      type: object
      properties:
        id:
          type: string
        conversationId:
          type: string
        senderId:
          type: string
        content:
          type: string
        timestamp:
          type: string
          format: date-time
    Contact:
      type: object
      properties:
        id:
          type: string
        userId1:
          type: string
        userId2:
          type: string
        status:
          type: string